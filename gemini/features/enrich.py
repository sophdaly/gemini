"""
Enrich input images with features generated by pretrained FaceNet
"""

from gemini.utils.data.preparation.prepare_features import import_lfw_data
from gemini.features.facenet import FaceNet
import tensorflow as tf
import pandas as pd
import argparse
import time
import sys


FLAGS = None


def main(_):

    t0 = time.time()

    # Import images to enrich
    images, labels = import_lfw_data(data_path=FLAGS.input_data_path)

    with tf.Session() as sess:

        # Load pretrained FaceNet
        facenet = FaceNet(sess=sess, model_path=FLAGS.model_path, verbose=FLAGS.print_data)

        # Enrich images with FaceNet embeddings
        print("Enriching images")

        embeddings = facenet.enrich(images=images, batch_size=FLAGS.batch_size)
        print("{} images enriched [timer: {:.2f}s]".format(len(embeddings), time.time() - t0))

    print(len(embeddings[0]))

    # Output images, embeddings and labels to file
    df = pd.DataFrame.from_dict(
        {
            'image': images,
            'label': labels,
            'embedding': embeddings
        }
    )

    df.to_csv(FLAGS.output_features_file, index=False)

    print("Features dataframe written to file: {}".format(FLAGS.output_features_file))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--model_path', type=str, default='models/vggface2',
                        help='Path to pretrained FaceNet model directory')
    parser.add_argument('--input_data_path', type=str, default='data/raw/lfw-deepfunneled',
                        help='Path to input image data directory')
    parser.add_argument('--output_features_file', type=str, default='data/processed/feature_data.csv',
                        help='Path to output feature data directory')
    parser.add_argument('--batch_size', type=int, default=50,
                        help='Batch size')
    parser.add_argument('--print_data', action='store_true',
                        help='Print restored data')

    FLAGS, unparsed = parser.parse_known_args()
    tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)